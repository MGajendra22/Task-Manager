// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock_interface.go -package=user
//

// Package user is a generated GoMock package.
package user

import (
	user "Task_Manager/model/user"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserStoreInterface is a mock of UserStoreInterface interface.
type MockUserStoreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreInterfaceMockRecorder
	isgomock struct{}
}

// MockUserStoreInterfaceMockRecorder is the mock recorder for MockUserStoreInterface.
type MockUserStoreInterfaceMockRecorder struct {
	mock *MockUserStoreInterface
}

// NewMockUserStoreInterface creates a new mock instance.
func NewMockUserStoreInterface(ctrl *gomock.Controller) *MockUserStoreInterface {
	mock := &MockUserStoreInterface{ctrl: ctrl}
	mock.recorder = &MockUserStoreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStoreInterface) EXPECT() *MockUserStoreInterfaceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserStoreInterface) CreateUser(u user.User) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", u)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserStoreInterfaceMockRecorder) CreateUser(u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserStoreInterface)(nil).CreateUser), u)
}

// DeleteUser mocks base method.
func (m *MockUserStoreInterface) DeleteUser(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}


// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserStoreInterfaceMockRecorder) DeleteUser(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserStoreInterface)(nil).DeleteUser), id)
}

// GetAllUser mocks base method.
func (m *MockUserStoreInterface) GetAllUser() ([]user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUser")
	ret0, _ := ret[0].([]user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUser indicates an expected call of GetAllUser.
func (mr *MockUserStoreInterfaceMockRecorder) GetAllUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUser", reflect.TypeOf((*MockUserStoreInterface)(nil).GetAllUser))
}

// GetByIDUser mocks base method.
func (m *MockUserStoreInterface) GetByIDUser(id int) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDUser", id)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDUser indicates an expected call of GetByIDUser.
func (mr *MockUserStoreInterfaceMockRecorder) GetByIDUser(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDUser", reflect.TypeOf((*MockUserStoreInterface)(nil).GetByIDUser), id)
}
