// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock_interface.go -package=task
//

// Package task is a generated GoMock package.
package task

import (
	task "Task_Manager/model/task"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTaskServiceInterface is a mock of TaskServiceInterface interface.
type MockTaskServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockTaskServiceInterfaceMockRecorder is the mock recorder for MockTaskServiceInterface.
type MockTaskServiceInterfaceMockRecorder struct {
	mock *MockTaskServiceInterface
}

// NewMockTaskServiceInterface creates a new mock instance.
func NewMockTaskServiceInterface(ctrl *gomock.Controller) *MockTaskServiceInterface {
	mock := &MockTaskServiceInterface{ctrl: ctrl}
	mock.recorder = &MockTaskServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskServiceInterface) EXPECT() *MockTaskServiceInterfaceMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockTaskServiceInterface) All() ([]task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockTaskServiceInterfaceMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockTaskServiceInterface)(nil).All))
}

// Complete mocks base method.
func (m *MockTaskServiceInterface) Complete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Complete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Complete indicates an expected call of Complete.
func (mr *MockTaskServiceInterfaceMockRecorder) Complete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockTaskServiceInterface)(nil).Complete), id)
}

// Create mocks base method.
func (m *MockTaskServiceInterface) Create(t task.Task) (task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", t)
	ret0, _ := ret[0].(task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTaskServiceInterfaceMockRecorder) Create(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskServiceInterface)(nil).Create), t)
}

// Delete mocks base method.
func (m *MockTaskServiceInterface) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskServiceInterfaceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskServiceInterface)(nil).Delete), id)
}

// GetTask mocks base method.
func (m *MockTaskServiceInterface) GetTask(id int) (task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", id)
	ret0, _ := ret[0].(task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockTaskServiceInterfaceMockRecorder) GetTask(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockTaskServiceInterface)(nil).GetTask), id)
}

// GetTasksByUserID mocks base method.
func (m *MockTaskServiceInterface) GetTasksByUserID(userId int) ([]task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByUserID", userId)
	ret0, _ := ret[0].([]task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}


// GetTasksByUserID indicates an expected call of GetTasksByUserID.
func (mr *MockTaskServiceInterfaceMockRecorder) GetTasksByUserID(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByUserID", reflect.TypeOf((*MockTaskServiceInterface)(nil).GetTasksByUserID), userId)
}
